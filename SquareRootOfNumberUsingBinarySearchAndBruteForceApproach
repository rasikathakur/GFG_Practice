//Given a positive integer n, find the square root of n. If n is not a perfect square, then return the floor value.

//Floor value of any number is the greatest Integer which is less than or equal to that number

//BruteForce - O(âˆšn)
class Solution {
    int floorSqrt(int n) {
        
        int i = 1;
        while(i * i <= n){
            i++;
        }
        return i-1;
        
    }
}

//binary search used O(log n)
class Solution {
    int floorSqrt(int n) {
        
        if(n == 0 || n == 1){
            return n;
        }
        
        int low = 1;
        int high = n;
        int ans = 1;
        
        while(low<=high){
            int mid = low + (high-low) / 2;
            
            if(mid <= n / mid){
                ans = mid;
                low = mid + 1;
            }else{
                high = mid - 1;
            }
            
        }
        
        return ans;
    }
}

//Output:

Input: n = 4
Output: 2
Explanation: Since, 4 is a perfect square, so its square root is 2.
Input: n = 11
Output: 3
Explanation: Since, 11 is not a perfect square, floor of square root of 11 is 3.
Input: n = 1
Output: 1
